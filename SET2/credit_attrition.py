# -*- coding: utf-8 -*-
"""Credit_Attrition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10zebOzWS0V5A48NxwDbJsJJiEAEpVvdW
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

data = pd.read_csv('/content/drive/MyDrive/Credit_card_attrition/Card_Attrition.csv', sep=';')
print(data)

"""### **DATA PROCESSING**

First, we need to check if there are any duplicate rows in the dataset
"""

duplicate = data[data.duplicated()]
print(duplicate)

"""So, there are no duplicate rows

Now, we need to check for any missing data in the whole dataset
"""

data.isnull().sum()

"""So, there are 14 empty values in Customer_Age and 4 empty values in Credit_Limit

We can fill these empty values with their coressponding class' median
"""

data['Customer_Age'].fillna(data['Customer_Age'].median(), inplace= True)
data['Credit_Limit'].fillna(data['Credit_Limit'].median(), inplace= True)

data.isnull().sum()

"""Missing Values successfully filled

Now, we have the data of "Transaction_count" and "Transaction_Amount" for each month

Handling these data in month is too much so we can combine them and handle them in quarters.

So, let's combine three months into one for both "Trans_Amt" as well as "Trans_count"
"""

#Dividing 6 months of Transaction Amount data into 2 Quarters and combining them
data['Trans_Amt_Q1'] = data['Trans_Amt_Oct12'] + data['Trans_Amt_Nov12'] + data['Trans_Amt_Dec12']
data['Trans_Amt_Q2'] = data['Trans_Amt_Jan13'] + data['Trans_Amt_Feb13'] + data['Trans_Amt_Mar13']

#Dividing 6 months of Transaction Count data into 2 Quarters and combining them
data['Trans_Count_Q1'] = data['Trans_Count_Oct12'] + data['Trans_Count_Nov12'] + data['Trans_Count_Dec12']
data['Trans_Count_Q2'] = data['Trans_Count_Jan13'] + data['Trans_Count_Feb13'] + data['Trans_Count_Mar13']

data.head()

"""Noe, in this project, we are supposed to find the people who will leave the credit card after some time.

So, the ratio of people in the second quarter to people in first quarter can be a good tool to predict the upcoming future
"""

data['Trans_Amt_ratio'] = data['Trans_Amt_Q2'] / data['Trans_Amt_Q1']

data['Trans_Count_ratio'] = data['Trans_Count_Q2'] / data['Trans_Count_Q1']

data.head()

"""Now, we can drop the data of all 6 months and the newly formed quarter data"""

dropping = ['Trans_Amt_Oct12','Trans_Amt_Nov12', 'Trans_Amt_Dec12', 'Trans_Amt_Jan13', 'Trans_Amt_Feb13', 'Trans_Amt_Mar13',
            'Trans_Count_Oct12','Trans_Count_Nov12', 'Trans_Count_Dec12', 'Trans_Count_Jan13', 'Trans_Count_Feb13', 'Trans_Count_Mar13',
            'Trans_Count_Q1', 'Trans_Count_Q2', 'Trans_Amt_Q1', 'Trans_Amt_Q2','Education_Level', 'Income_Category', 'Customer_Age', 'CLIENTNUM']
data_new = data.drop(dropping, axis=1)
data_new.head()

"""### **Numerical values to the categorical data**"""

data['Marital_Status'].value_counts()

Marital_status_mapping = {"Married": 0, "Single": 1, "Unknown":2, "Divorced":3}
#for dataset in data_new:
data_new['Marital_Status'] = data_new['Marital_Status'].map(Marital_status_mapping)
data_new.head()

data['Gender'].value_counts()

sex_mapping = {"M": 0, "F": 1}
data_new['Gender'] = data_new['Gender'].map(sex_mapping)
data_new['Gender'].head()

data['Card_Category'].value_counts()

card_mapping = {"Blue": 0, "Silver": 1, "Gold":2, "Platinum":3}
data_new['Card_Category'] = data_new['Card_Category'].map(card_mapping)
data_new['Card_Category'].head()

data_new.head()

"""### **SPLITTING TEST AND TRAIN DATA**

In the given dataset, there is no test dataset so we will have to partition our data into train data and test data

Train_data: 7000
Test_data : 3127
"""

x_train, x_test = train_test_split(data_new, train_size=7127, test_size=3000)
x_test.head()

y_train = x_train['Attrition_Flag']
x_train.drop('Attrition_Flag', axis=1, inplace=True)
print(x_train.shape)
print(y_train.shape)

y_train.head()

y_test = x_test['Attrition_Flag']
x_test.drop('Attrition_Flag', axis=1, inplace=True)
print(x_test.shape)
print(y_test.shape)

x_test.head()

# Importing Classifier Modules
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

"""Random Forest"""

clf = RandomForestClassifier(n_estimators=100)
clf.fit(x_train, y_train)
y_pred_rf = clf.predict(x_test)
accuracy_rf = accuracy_score(y_pred_rf, y_test)
print(accuracy_rf*100)

"""Decision Tree"""

clf = DecisionTreeClassifier()
clf.fit(x_train, y_train)
y_pred_dt = clf.predict(x_test)
accuracy_dt = accuracy_score(y_pred_dt, y_test)
print(accuracy_dt*100)

"""So, Random Forest got the highest accuracy amongst the two"""